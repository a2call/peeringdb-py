#!/bin/env python

from __future__ import print_function

import argparse
import cmd
import munge
import munge.codec
import munge.codec.all
import os
from peeringdb import config
from peeringdb import client
from peeringdb.localdb import LocalDB
import re
import sys


def do_sync(args):
    cfg = config.get_config(args.config)
    db = LocalDB(cfg)
    db.sync()
    return 0

def do_conf_write(args):
    cfg = config.get_config(args.config)
    config.write_config(cfg, args.config)
    return 0

def parse_objid(objid):
    match = re.search('(?P<typ>\w+)[^\d]*(?P<id>\d+)', objid)
    if not match:
        return None
    return (match.group('typ'), match.group('id'))

def try_dump_obj(args):
    res = parse_objid(args.cmd)
    if not res:
        return False

    pdb = client.PeeringDB()
    data = pdb.get(res[0], res[1])
    codec = munge.get_codec(args.output_format)()
    codec.dump(data, sys.stdout)
    return True

def main(argv=sys.argv):
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument('-c', '--config', dest='config', action='store', default='~/.peeringdb', help='config directory')
    parser.add_argument('-O', '--output-format', action='store', default='yaml', help='output data format')
    parser.add_argument('--list-codecs', action='store_true', help='list all available codecs')

    parser.add_argument('cmd', nargs='?', help='subcommand {sync,conf_write,<obj><id>}')

    args = parser.parse_args()

    if getattr(args, 'list_codecs', False):
        print(munge.codec.list_codecs())
        return 0

    if args.cmd:
        if args.cmd == 'sync':
            return do_sync(args)
        elif args.cmd == 'conf_write':
            return do_conf_write(args)
        elif try_dump_obj(args):
            return 0

    parser.print_help()
    return 1

if __name__ == '__main__':
    sys.exit(main())

