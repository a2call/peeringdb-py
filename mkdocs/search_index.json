{
    "docs": [
        {
            "location": "/", 
            "text": "PeeringDB Python Client\n\n\nThis is the first release of our client package, it's fairly new, but we're releasing early to get feedback as soon as possible.\n\n\nHow to install\n\n\nFor those unfamiliar with python, you'll usually want to install to a separate \nvirtualenv\n.\n\n\nvirtualenv pdbvenv\n. pdbvenv/bin/activate\n\n\n\nInstall the peeringdb package with\n\n\npip install peeringdb\n\n\n\nWhat's included?\n\n\nThere's currently a hard dependency on django_peeringdb, so the django models are included.\n\n\nBy installing the package, you get both a \nclient library\n and a \ncommand line utility\n.\n\n\nConfiguration\n\n\nBoth command line and library will try to use a common config file, by default located at \n~/.peeringdb/config.yaml\n\n\nYou can go through a setup wizard to configure and create the config (also downloads any needed requirements) with:\n\n\npeeringdb configure\n\n\n\nAlternatively, to write a config file with the defaults:\n\n\npeeringdb conf_write\n\n\n\nThen edit the file it created (default \n~/peeringdb/config.yaml\n). Currently, it directly uses django, so any database backend django supports will work, for example, to sync to MySQL, you could use the following database config:\n\n\ndatabase:\n  engine: mysql\n  host: localhost\n  name: peeringdb\n  user: peeringdb\n  password: supers3cr3t\n\n\n\nAfter everything is configured, check your setup and install any new dependencies with:\n\n\npeeringdb depcheck", 
            "title": "Home"
        }, 
        {
            "location": "/#peeringdb-python-client", 
            "text": "This is the first release of our client package, it's fairly new, but we're releasing early to get feedback as soon as possible.", 
            "title": "PeeringDB Python Client"
        }, 
        {
            "location": "/#how-to-install", 
            "text": "For those unfamiliar with python, you'll usually want to install to a separate  virtualenv .  virtualenv pdbvenv\n. pdbvenv/bin/activate  Install the peeringdb package with  pip install peeringdb", 
            "title": "How to install"
        }, 
        {
            "location": "/#whats-included", 
            "text": "There's currently a hard dependency on django_peeringdb, so the django models are included.  By installing the package, you get both a  client library  and a  command line utility .", 
            "title": "What's included?"
        }, 
        {
            "location": "/#configuration", 
            "text": "Both command line and library will try to use a common config file, by default located at  ~/.peeringdb/config.yaml  You can go through a setup wizard to configure and create the config (also downloads any needed requirements) with:  peeringdb configure  Alternatively, to write a config file with the defaults:  peeringdb conf_write  Then edit the file it created (default  ~/peeringdb/config.yaml ). Currently, it directly uses django, so any database backend django supports will work, for example, to sync to MySQL, you could use the following database config:  database:\n  engine: mysql\n  host: localhost\n  name: peeringdb\n  user: peeringdb\n  password: supers3cr3t  After everything is configured, check your setup and install any new dependencies with:  peeringdb depcheck", 
            "title": "Configuration"
        }, 
        {
            "location": "/cli/", 
            "text": "Command Line Interface\n\n\nUsage: peeringdb [OPTIONS] COMMAND [ARGS]...\n\n  PeeringDB\n\nOptions:\n  --version      Show the version and exit.\n  --list-codecs  list available codecs\n  --help         Show this message and exit.\n\nCommands:\n  conf_dump   output current config\n  conf_write  write config file with defaults\n\n  get         get an object from peeringdb\n  whois       simulate a whois lookup\n\n  # local database management commands\n  configure    configure peeringdb\n  depcheck     check for dependencies, install if necessary\n  drop_tables  drop all peeringdb tables\n  sync         synchronize to a local database\n\n\n\nCommands\n\n\nconf_dump\n\n\nOutputs current config\n\n\nconf_write\n\n\nWrites a config file with all options and defaults to the config directory (changable with -c)\n\n\nconfigure\n\n\nPrompts user for input to configure local database\n\n\ndepcheck\n\n\nChecks for dependencies and installs any needed packages\n\n\ndrop_tables\n\n\n\n\nWarning\n\n\nThis will delete data\n\n\n\n\nDrop all peeringdb tables\n\n\nget \nobj\nid\n\n\nFetches a specific object and outputs to stdout\n\n\nYou may use the CLI to dump any object in the database with \n, for example:\n\n\npeeringdb get net1\n\n\n\nYou may also change the output format to anything munge supports, so to get json, it would be:\n\n\npeeringdb -O json get net1\n\n\n\nwhois \nobj\nid\n\n\nFetches a specific object and outputs to stdout, supports everything that \nget\n does, as well as:\n\n\n  as\nASN\n : query by AS\n\n  ixlans\nnet id\n : query networks on an IX\n\n\n\nIf you provide authentication in your config file, it will include contacts much like version 1 did.\n\n\nsync\n\n\nSynchronizes PeeringDB to a local database\n\n\nAfter doing a full sync, it only updates objects that have changed, so it's safe / efficient to run it as often as you want.\n\n\nBy default, peeringdb will sync to a file in the config dir called peeringdb.sqlite3 - to change that, see \nconfiguration\n\n\nThen edit the file it created (default \n~/peeringdb/config.yaml\n). Currently, it directly uses django, so any database backend django supports will work, for example, to sync to MySQL, you could use the following database config:\n\n\ndatabase:\n  engine: mysql\n  host: localhost\n  name: peeringdb\n  user: peeringdb\n  password: supers3cr3t\n\n\n\n\n\nMySQL\n\n\nYou need to use utf8 and a utf8 collation before doing the initial sync.\n\n\nNew database:\n\n\nCREATE DATABASE peeringdb DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\n\n\n\nor existing database:\n\n\nALTER DATABASE peeringdb DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\n\n\n\n\n\nOnce the database is configured how you'd like it, you can do an initial sync of the database with\n\n\npeeringdb sync\n\n\n\nThen add a cron job to keep it in sync, for example, once a day at between midnight and midnight plus 10 minutes, with random sleep delay to prevent thundering hurd\n\n\ncrontab -l | { cat; echo \"`expr $RANDOM % 60` 0 * * * `which peeringdb` sync \n /dev/null 2\n1\"; } | crontab -\n\n\n\nOr, if your cron supports random:\n\n\ncrontab -l | { cat; echo \"0 0 * * * sleep \\$[RANDOM\\%600] ; `which peeringdb` sync \n /dev/null 2\n1\"; } | crontab -", 
            "title": "CLI"
        }, 
        {
            "location": "/cli/#command-line-interface", 
            "text": "Usage: peeringdb [OPTIONS] COMMAND [ARGS]...\n\n  PeeringDB\n\nOptions:\n  --version      Show the version and exit.\n  --list-codecs  list available codecs\n  --help         Show this message and exit.\n\nCommands:\n  conf_dump   output current config\n  conf_write  write config file with defaults\n\n  get         get an object from peeringdb\n  whois       simulate a whois lookup\n\n  # local database management commands\n  configure    configure peeringdb\n  depcheck     check for dependencies, install if necessary\n  drop_tables  drop all peeringdb tables\n  sync         synchronize to a local database", 
            "title": "Command Line Interface"
        }, 
        {
            "location": "/cli/#commands", 
            "text": "", 
            "title": "Commands"
        }, 
        {
            "location": "/cli/#conf_dump", 
            "text": "Outputs current config", 
            "title": "conf_dump"
        }, 
        {
            "location": "/cli/#conf_write", 
            "text": "Writes a config file with all options and defaults to the config directory (changable with -c)", 
            "title": "conf_write"
        }, 
        {
            "location": "/cli/#configure", 
            "text": "Prompts user for input to configure local database", 
            "title": "configure"
        }, 
        {
            "location": "/cli/#depcheck", 
            "text": "Checks for dependencies and installs any needed packages", 
            "title": "depcheck"
        }, 
        {
            "location": "/cli/#drop_tables", 
            "text": "Warning  This will delete data   Drop all peeringdb tables", 
            "title": "drop_tables"
        }, 
        {
            "location": "/cli/#get-objid", 
            "text": "Fetches a specific object and outputs to stdout  You may use the CLI to dump any object in the database with  , for example:  peeringdb get net1  You may also change the output format to anything munge supports, so to get json, it would be:  peeringdb -O json get net1", 
            "title": "get &lt;obj&gt;&lt;id&gt;"
        }, 
        {
            "location": "/cli/#whois-objid", 
            "text": "Fetches a specific object and outputs to stdout, supports everything that  get  does, as well as:    as ASN  : query by AS\n\n  ixlans net id  : query networks on an IX  If you provide authentication in your config file, it will include contacts much like version 1 did.", 
            "title": "whois &lt;obj&gt;&lt;id&gt;"
        }, 
        {
            "location": "/cli/#sync", 
            "text": "Synchronizes PeeringDB to a local database  After doing a full sync, it only updates objects that have changed, so it's safe / efficient to run it as often as you want.  By default, peeringdb will sync to a file in the config dir called peeringdb.sqlite3 - to change that, see  configuration  Then edit the file it created (default  ~/peeringdb/config.yaml ). Currently, it directly uses django, so any database backend django supports will work, for example, to sync to MySQL, you could use the following database config:  database:\n  engine: mysql\n  host: localhost\n  name: peeringdb\n  user: peeringdb\n  password: supers3cr3t   MySQL  You need to use utf8 and a utf8 collation before doing the initial sync.  New database:  CREATE DATABASE peeringdb DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;  or existing database:  ALTER DATABASE peeringdb DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;   Once the database is configured how you'd like it, you can do an initial sync of the database with  peeringdb sync  Then add a cron job to keep it in sync, for example, once a day at between midnight and midnight plus 10 minutes, with random sleep delay to prevent thundering hurd  crontab -l | { cat; echo \"`expr $RANDOM % 60` 0 * * * `which peeringdb` sync   /dev/null 2 1\"; } | crontab -  Or, if your cron supports random:  crontab -l | { cat; echo \"0 0 * * * sleep \\$[RANDOM\\%600] ; `which peeringdb` sync   /dev/null 2 1\"; } | crontab -", 
            "title": "sync"
        }, 
        {
            "location": "/api/", 
            "text": "Application Program Interface\n\n\nInstantiate\n\n\nfrom peeringdb import PeeringDB\n\npdb = PeeringDB()\n\n\n\nCalls\n\n\nall\n\n\ndef all(self, typ, **kwargs):\n\n\n\nGets all objects of specified type, matching query from kwargs, valid kwargs are available \nhere\n.\n\n\nget\n\n\ndef get(self, typ, id, **kwargs):\n\n\n\nGets a single object of specified type and id, matching query from kwargs, valid kwargs are available \nhere\n.\n\n\ncreate\n\n\ndef create(self, typ, data, return_response=False):\n\n\n\nCreate an object of specified type from data.\n\n\nupdate\n\n\ndef update(self, typ, id, **kwargs):\n\n\n\nUpdate an object of specified type from kwargs.\n\n\nsave\n\n\ndef save(self, typ, data):\n\n\n\nSaves object of specified type from data.\n\n\nrm\n\n\ndef rm(self, typ, id):\n\n\n\nRemoves specified object.\n\n\ntype_wrap\n\n\ndef type_wrap(self, typ):\n\n\n\nReturns an object that directly does operations on the specified type.\n\n\nFull Example\n\n\n# unauthenticated to default URL (unless ~/.peeringdb/config.yaml exists)\nfrom peeringdb import PeeringDB\n\npdb = PeeringDB()\n\n# get a single record\nnet = pdb.type_wrap('net')\n# both are equal\nassert net.get(1) == pdb.get('net', 1)\n\n# query by parameter\npdb.all('net', asn=2906)\n# or\nnet.all(asn=2906)", 
            "title": "API"
        }, 
        {
            "location": "/api/#application-program-interface", 
            "text": "", 
            "title": "Application Program Interface"
        }, 
        {
            "location": "/api/#instantiate", 
            "text": "from peeringdb import PeeringDB\n\npdb = PeeringDB()", 
            "title": "Instantiate"
        }, 
        {
            "location": "/api/#calls", 
            "text": "", 
            "title": "Calls"
        }, 
        {
            "location": "/api/#all", 
            "text": "def all(self, typ, **kwargs):  Gets all objects of specified type, matching query from kwargs, valid kwargs are available  here .", 
            "title": "all"
        }, 
        {
            "location": "/api/#get", 
            "text": "def get(self, typ, id, **kwargs):  Gets a single object of specified type and id, matching query from kwargs, valid kwargs are available  here .", 
            "title": "get"
        }, 
        {
            "location": "/api/#create", 
            "text": "def create(self, typ, data, return_response=False):  Create an object of specified type from data.", 
            "title": "create"
        }, 
        {
            "location": "/api/#update", 
            "text": "def update(self, typ, id, **kwargs):  Update an object of specified type from kwargs.", 
            "title": "update"
        }, 
        {
            "location": "/api/#save", 
            "text": "def save(self, typ, data):  Saves object of specified type from data.", 
            "title": "save"
        }, 
        {
            "location": "/api/#rm", 
            "text": "def rm(self, typ, id):  Removes specified object.", 
            "title": "rm"
        }, 
        {
            "location": "/api/#type_wrap", 
            "text": "def type_wrap(self, typ):  Returns an object that directly does operations on the specified type.", 
            "title": "type_wrap"
        }, 
        {
            "location": "/api/#full-example", 
            "text": "# unauthenticated to default URL (unless ~/.peeringdb/config.yaml exists)\nfrom peeringdb import PeeringDB\n\npdb = PeeringDB()\n\n# get a single record\nnet = pdb.type_wrap('net')\n# both are equal\nassert net.get(1) == pdb.get('net', 1)\n\n# query by parameter\npdb.all('net', asn=2906)\n# or\nnet.all(asn=2906)", 
            "title": "Full Example"
        }
    ]
}